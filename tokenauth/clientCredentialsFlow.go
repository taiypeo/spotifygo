package tokenauth

import (
	"encoding/base64"
	"encoding/json"
	"errors"
	"fmt"
	"time"

	"github.com/taiypeo/spotifygo/requests"
)

// AuthToken is a struct that represents a simple token
// generated by client credentials flow.
type AuthToken struct {
	AccessToken  string
	ExpiresIn    int64
	CreationTime time.Time
}

// GetToken returns a token that is used in Spotify REST API to authorize
// user actions.
func (auth *AuthToken) GetToken() string {
	return "Bearer " + auth.AccessToken
}

// NewAuthToken creates a new AuthToken.
// clientId is the Spotify application client id;
// clientSecret is the Spotify application client secret.
func NewAuthToken(clientID, clientSecret string) (AuthToken, requests.APIResponse, error) {
	encodedAuthorizationHeader := "Basic " + base64.StdEncoding.EncodeToString(
		[]byte(fmt.Sprintf("%s:%s", clientID, clientSecret)),
	)

	response, err := requests.PostAuthorization(
		map[string]string{"Authorization": encodedAuthorizationHeader},
		"grant_type=client_credentials",
	)
	if err != nil {
		return AuthToken{}, response, err
	}

	var decodedResponse struct {
		AccessToken string `json:"access_token"`
		TokenType   string `json:"token_type"`
		ExpiresIn   int64  `json:"expires_in"`
	}
	if err := json.Unmarshal([]byte(response.JSONBody), &decodedResponse); err != nil {
		return AuthToken{}, response, err
	}

	if decodedResponse.TokenType != "Bearer" {
		return AuthToken{}, response, errors.New("token_type is not Bearer")
	}

	var createdAuthToken AuthToken
	createdAuthToken.CreationTime = time.Now()
	createdAuthToken.AccessToken = decodedResponse.AccessToken
	createdAuthToken.ExpiresIn = decodedResponse.ExpiresIn
	return createdAuthToken, response, nil
}

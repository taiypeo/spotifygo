package tokenauth

import (
	"encoding/base64"
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"github.com/taiypeo/spotifygo"
	"github.com/taiypeo/spotifygo/apierrors"
	"github.com/taiypeo/spotifygo/requests"
)

// RefreshableAuthToken is a struct that represents a token that
// can refresh after expiring. It is generated by
// authorization code flow.
type RefreshableAuthToken struct {
	RefreshToken string `json:"refresh_token"`
	ScopedAuthToken
}

// Validate returns a TypedError if an RefreshableAuthToken struct is incorrect.
func (auth *RefreshableAuthToken) Validate() apierrors.TypedError {
	if !spotifygo.Debug {
		return nil
	}

	return auth.ScopedAuthToken.Validate()
}

// NewRefreshableAuthToken creates a new RefreshableAuthToken.
// authCode is the authorization code returned from the request to the /authorize endpoint;
// redirectURI is the same redirect_uri that was supplied when requesting the authorization code;
// clientId is the Spotify application client id;
// clientSecret is the Spotify application client secret.
func NewRefreshableAuthToken(
	authCode,
	redirectURI,
	clientID,
	clientSecret string,
) (RefreshableAuthToken, apierrors.TypedError) {
	payload := fmt.Sprintf(
		"grant_type=authorization_code&code=%s&redirect_uri=%s",
		authCode,
		redirectURI,
	)
	encodedAuthorizationHeader := "Basic " + base64.StdEncoding.EncodeToString(
		[]byte(fmt.Sprintf("%s:%s", clientID, clientSecret)),
	)

	response, err := requests.PostAuthorization(
		map[string]string{"Authorization": encodedAuthorizationHeader},
		payload,
	)
	if err != nil {
		return RefreshableAuthToken{}, err
	}

	var createdRefreshableAuthToken RefreshableAuthToken
	if err := json.Unmarshal([]byte(response.JSONBody), &createdRefreshableAuthToken); err != nil {
		return RefreshableAuthToken{}, apierrors.NewBasicErrorFromError(err)
	}
	if err := (&createdRefreshableAuthToken).Validate(); err != nil {
		return RefreshableAuthToken{}, err
	}

	createdRefreshableAuthToken.CreationTime = time.Now()
	createdRefreshableAuthToken.Scope = strings.Split(createdRefreshableAuthToken.ScopeString, " ")
	return createdRefreshableAuthToken, nil
}

// Refresh refreshes the access token using the refresh token.
// clientId is the Spotify application client id;
// clientSecret is the Spotify application client secret.
func (auth *RefreshableAuthToken) Refresh(clientID, clientSecret string) apierrors.TypedError {
	payload := fmt.Sprintf("grant_type=refresh_token&refresh_token=%s", auth.RefreshToken)
	encodedAuthorizationHeader := "Basic " + base64.StdEncoding.EncodeToString(
		[]byte(fmt.Sprintf("%s:%s", clientID, clientSecret)),
	)

	response, err := requests.PostAuthorization(
		map[string]string{"Authorization": encodedAuthorizationHeader},
		payload,
	)
	if err != nil {
		return err
	}

	var refreshedToken RefreshableAuthToken
	if err := json.Unmarshal([]byte(response.JSONBody), &refreshedToken); err != nil {
		return apierrors.NewBasicErrorFromError(err)
	}

	if err := (&refreshedToken).Validate(); err != nil {
		return err
	}

	auth.CreationTime = time.Now()
	auth.AccessToken = refreshedToken.AccessToken
	auth.ExpiresIn = refreshedToken.ExpiresIn
	auth.ScopeString = refreshedToken.ScopeString
	auth.Scope = strings.Split(refreshedToken.ScopeString, " ")

	return nil
}
